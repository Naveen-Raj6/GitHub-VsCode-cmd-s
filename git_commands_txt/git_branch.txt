

ðŸ”¹ Git Command: 
git branch


ðŸ”¹ Description:
The git branch command is used to create, list, rename, and delete branches in a Git repository. 
A branch in Git represents an independent line of development, allowing you to work on features 
or bug fixes without affecting the main codebase (usually the main or master branch).

By default, git branch only operates on the local branches (not remote ones), unless specifically requested.


ðŸ”¹ Options:
(no option)	Lists all local branches.
-a :-Lists both local and remote-tracking branches.
-r :-Lists only remote-tracking branches.
<branch-name> :-Creates a new branch with the specified name.
-d <branch-name> :-Deletes the specified branch (only if fully merged).
-D <branch-name> :-Force deletes the branch (even if not merged).
-m <old-name> <new-name> :-Renames a branch from old-name to new-name.
--merged :-Lists branches that have been merged into the current branch.
--no-merged :-Lists branches that have not been merged into the current branch.


ðŸ”¹ Example:
git branch
Lists all local branches in the repository and highlights the current branch with an asterisk (*).

ðŸ”¹ Example:
git branch new-feature
Creates a new branch named new-feature.

ðŸ”¹ Example:
git branch -d old-feature
Deletes the old-feature branch if it has been fully merged.

ðŸ”¹ Example:
git branch -D temp-fix
Force-deletes the temp-fix branch, even if it has unmerged changes.

ðŸ”¹ Example:
git branch -m dev development
Renames the dev branch to development.

ðŸ”¹ Example:
git branch -a
Lists all branches, including remote-tracking branches.

ðŸ”¹ Syntax:
git branch [<options>] [<branch-name>]

* To create a branch: git branch <branch-name>
* To delete a branch: git branch -d <branch-name>
* To rename a branch: git branch -m <old-name> <new-name>




ðŸ”¹ What is git branch -M?
The -M flag in git branch stands for "move/rename forcefully."
It renames the current branch or any specified branch to a new name, even if the new name already exists (it will overwrite).

This is different from -m, which is a safer version and fails if the new branch name already exists.


ðŸ”¹ Syntax:
git branch -M <new-branch-name>

or (for renaming a specific branch):

ðŸ”¹ Syntax:
git branch -M <old-branch-name> <new-branch-name>


ðŸ”¹ Examples:
âœ… git branch -M main
This renames your current branch (usually master) to main.
Itâ€™s commonly used when:

* You want to change the default branch name from master to main (modern Git convention).
* GitHub and other platforms now encourage using main instead of master.

âœ… git branch -M mastery
This renames your current branch to mastery.
You might do this:

* To follow your custom naming conventions.
* To use a name more meaningful to your team/project.


ðŸ”¹ Why do we use them?
* To rename the default branch in a local repository (e.g., from master â†’ main).
* To align with remote repositories that expect a certain branch name (e.g., GitHub now uses main by default).
* To organize branches by better naming conventions (e.g., development, production, feature-x, mastery, etc.).
* -M is used instead of -m when you want to force the rename even if a branch with the new name already exists.

ðŸ”¹ Difference between git branch -M main and git branch -M mastery:
git branch -M main:-
* Renames current branch to main.	
* Used to update from old master to new standard main.

git branch -M mastery:-
* Renames current branch to mastery.	
* Used for custom naming or personalized workflows.

The only difference is the target name â€” technically, both do the same thing: rename your branch to the specified name, forcefully.

