

ðŸ”¹ Git Command: 
git reflog


ðŸ”¹ Description:
The git reflog command shows a log of where your HEAD and branch references have been, 
including updates from rebases, commits, resets, merges, and checkouts. 
It is a powerful tool for recovering lost commits and understanding how your branch has changed over time.

While git log shows commits in a linear history, git reflog shows all changes to HEAD, even those not part of the current branchâ€™s commit graph. This makes it especially helpful when you've made a mistake (like a bad reset or rebase) and need to recover a previous state.


ðŸ”¹ Options:
git reflog :-Shows the history of HEAD movements in the current repository.
git reflog <branch> :-Shows the reflog for a specific branch.
--date=relative :-Shows the date in relative terms (e.g., "2 hours ago").
-n <number> or --max-count=<number> :-Limits the number of entries shown.
--pretty=oneline :-Displays the reflog entries in one line each (abbreviated hash and message).


ðŸ”¹ Example:
git reflog
Displays the history of changes made to HEAD (e.g., commits, resets, checkouts, rebases).

ðŸ”¹ Example:
git reflog -n 5
Shows the last 5 movements of HEAD.

ðŸ”¹ Example:
git reflog --date=relative
Displays the reflog with commit dates in relative format like "5 minutes ago".

ðŸ”¹ Example:
git reflog master
Displays the reflog for the master branch (i.e., changes made to refs/heads/master).

ðŸ”¹ Example:
git reset --hard HEAD@{3}
Uses a reflog reference (HEAD@{3}) to reset your repository back to its state 3 actions agoâ€”very useful for recovering from mistakes.


ðŸ”¹ Syntax:
git reflog

ðŸ”¹ Syntax:
git reflog <branch>

ðŸ”¹ Syntax:
git reflog -n <number>

ðŸ”¹ Syntax:
git reflog --date=relative

ðŸ”¹ Syntax:
git reflog --pretty=oneline
