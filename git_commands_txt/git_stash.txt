

ğŸ”¹ Git Command: 
git stash

ğŸ”¹ Description:
The git stash command is used to temporarily save (stash) your uncommitted changes (both staged and unstaged) without committing them.
It lets you switch branches or pull changes without losing your current work.

You can apply, pop, list, or drop your stashes later.

Itâ€™s very helpful when you need to:

* Switch branches quickly
* Pull latest changes before committing
* Pause your current work temporarily


ğŸ”¹ Options:
push :-(default) Saves your changes into a new stash entry.
-m "msg" :-Adds a message to describe the stash.
pop :-Applies the most recent stash and removes it from the stash list.
apply :-Applies the most recent stash without removing it.
list :-Shows all stash entries.
show :-Shows the changes stored in the latest stash.
drop :-Deletes a specific stash entry.
clear :-Deletes all stash entries.
stash@{n} :-Refers to a specific stash (e.g., stash@{0} is the latest).

ğŸ”¹ Example:
git stash
Stashes your uncommitted changes (tracked files only).

ğŸ”¹ Example:
git stash push -m "WIP: homepage layout"
Stashes changes with a custom message.

ğŸ”¹ Example:
git stash list
Displays all saved stashes.

ğŸ”¹ Example:
git stash apply
Applies the most recent stash without removing it.

ğŸ”¹ Example:
git stash pop
Applies and removes the most recent stash.

ğŸ”¹ Example:
git stash drop stash@{1}
Deletes a specific stash.

ğŸ”¹ Example:
git stash clear
Removes all stashes.


ğŸ”¹ Syntax:
git stash [push] [-m "message"]

ğŸ”¹ Syntax:
git stash list

ğŸ”¹ Syntax:
git stash show [stash@{n}]

ğŸ”¹ Syntax:
git stash apply [stash@{n}]

ğŸ”¹ Syntax:
git stash pop [stash@{n}]

ğŸ”¹ Syntax:
git stash drop [stash@{n}]

ğŸ”¹ Syntax:
git stash clear