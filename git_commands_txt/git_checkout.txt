

ðŸ”¹ Git Command: 
git checkout


ðŸ”¹ Description:
The git checkout command is used to:

* Switch between branches in a Git repository.
* Restore files or commits to your working directory.
* Create a new branch from a specific commit or the current branch.

ðŸ”„ Note:Starting from Git 2.23+, git switch and git restore were introduced to split the responsibilities of git checkout for clarity. 
        But git checkout still works and is widely used.


ðŸ”¹ Options:
<branch> :-Switches to the specified branch.
-b <new-branch> :-Creates and switches to a new branch from current HEAD.
<commit> -- <file> :-Restores the file from a specific commit.
-- :-Separates branch/commit name from file paths to avoid confusion.
-f :-Forces the switch and discards local changes.
-q :-Suppresses output (quiet mode).

ðŸ”¹ Example:
git checkout main
Switches to the main branch.

ðŸ”¹ Example:
git checkout -b feature-login
Creates and switches to a new branch called feature-login.

ðŸ”¹ Example:
git checkout a1b2c3d4
Checks out a previous commit in a "detached HEAD" state.

ðŸ”¹ Example:
git checkout HEAD~1 -- index.html
Restores the version of index.html from the previous commit.


ðŸ”¹ Syntax:
git checkout [branch-name]

ðŸ”¹ Syntax:
git checkout -b [new-branch-name]

ðŸ”¹ Syntax:
git checkout [commit] -- [file-path]